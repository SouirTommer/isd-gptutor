{
  "pdfs": [
    {
      "id": "1743602829733",
      "fileName": "0-Course Overview.pdf",
      "originalText": "\n\nCOMP3122\nInformation Systems Development\n1\n\nCourse Information\n•Syllabus\n•https://www.polyu.edu.hk/comp/docdrive/ug/subject/COMP3122.pdf\n•Lecture session\n•TUE 1230 –1520 (Venue: CD301)\n•Instructors\n•Dr LUI Richard  (email: cswclui@polyu.edu.hk)\n•Teaching assistants\n•TBC\n•Assessment\n•Coursework (70%)\n•Assignment (12%)\n•Quiz (25%)\n•Project (27%)\n•Class Participation and Exercises (in-class or take home) (6%)\n•Final Exam (30%)\n2\nPlease bring your laptop for completing the hands-\non labs/class activities during the lectures.\n\nAcademic Calendar\n3\n\nTeaching Plan (Tentative)\n4\nTopicsRemarks\n1Course Overview;  Software Development Overview\n2Collaboration and Version Control in Software Development; \nLab\nLunar New Year Break\n3Agile Development; Lab\n4Cloud Based Application Development; Lab\n5Generative AI and software development\n6Software Testing (I)\n7Software Testing (II); LabIndividual Assignment Deadline\n8\nProject Discussion (I)\n9\nProject Discussion (II); Quiz\n10Containerized application development; Lab\n11Additional Topics; Course Review\n12Project Presentation\n13Project Presentation\n\nGitHub Codespaces and Copilot\n•Register a GitHub account using your PolyU Email.\n•https://github.com\n•Signup for the GitHub Student Developer Pack using your PolyU Email.\nhttps://education.github.com/pack\n5\n\nYou may visit the following links for more details about the steps.\n•https://education.github.com/pack\n•https://techcommunity.microsoft.com/t5/educator-developer-blog/step-by-step-setting-up-\ngithub-student-and-github-copilot-as-an/ba-p/3736279\nNote: \n•Submitted applications are sometimes reviewed within one to several days. This might take slightly longer \non very few occasions depending on the volume of  applications received.\n•Please complete it by the end of  week 1 (reserve several days for approval). We will use it in the lab in week 2\n•If  you already have a Copilot account, you can simply connect your GitHub account and activate your \nGitHub Student Developer Pack from your Copilot account settings.\n6\n\n•SignupforGithubModels\n7",
      "flashcards": [
        {
          "question": "What is the course code for Information Systems Development?",
          "answer": "COMP3122"
        },
        {
          "question": "What percentage of the assessment is based on coursework?",
          "answer": "70%"
        },
        {
          "question": "When are the lectures for COMP3122 scheduled?",
          "answer": "Tuesdays from 12:30 to 15:20"
        },
        {
          "question": "What is the email address of the instructor Dr. Lui Richard?",
          "answer": "cswclui@polyu.edu.hk"
        },
        {
          "question": "What topics will be covered in the course related to software development?",
          "answer": "Topics include Agile Development, Cloud-Based Application Development, and Software Testing."
        },
        {
          "question": "What is the purpose of registering for the GitHub Student Developer Pack?",
          "answer": "To gain access to tools and resources for development using GitHub."
        },
        {
          "question": "What is the percentage weight of the final exam in the overall assessment?",
          "answer": "30%"
        },
        {
          "question": "When is the individual assignment deadline during the course?",
          "answer": "During Software Testing (II) in week 7."
        },
        {
          "question": "What should students bring to the lectures for hands-on labs?",
          "answer": "Students should bring their laptops."
        },
        {
          "question": "What is the venue for the COMP3122 lectures?",
          "answer": "CD301"
        }
      ],
      "summary": "The course COMP3122, titled \"Information Systems Development,\" is offered at PolyU and primarily focuses on software development methodologies and practices. The course includes a mix of lectures and practical lab sessions, scheduled for Tuesdays from 12:30 PM to 3:20 PM in venue CD301. Key instructors include Dr. Lui Richard, with teaching assistants to be confirmed. Assessment for the course is divided into several components: coursework (70%), an assignment (12%), quizzes (25%), a project (27%), class participation (6%), and a final exam (30%).\n\nThe tentative teaching plan outlines the topics that will be covered throughout the semester, beginning with an overview of software development and progressing through various themes such as Agile Development, Cloud-Based Application Development, Generative AI in software development, and ongoing software testing. The course also includes practical lab sessions where students will engage in hands-on activities. Important milestones include individual assignment deadlines, project discussions, and project presentations.\n\nStudents are required to bring their laptops for lab sessions, highlighting the course's practical focus. Additionally, they are encouraged to register for GitHub accounts using their PolyU email, including signing up for the GitHub Student Developer Pack, which is essential for accessing tools like GitHub Codespaces and Copilot. The course emphasizes the importance of completing the GitHub registration by the end of the first week to utilize these resources effectively in the second week’s labs.\n\nOverall, COMP3122 aims to provide students with a robust foundation in information systems development through a balance of theoretical knowledge and practical application.",
      "cornellNotes": {
        "cues": [
          "Course Information",
          "Lecture Schedule",
          "Instructors and TAs",
          "Assessment Breakdown",
          "Academic Calendar",
          "Tentative Teaching Plan",
          "GitHub Codespaces and Copilot",
          "Important Notes"
        ],
        "notes": [
          "Syllabus available at https://www.polyu.edu.hk/comp/docdrive/ug/subject/COMP3122.pdf",
          "Lectures on TUE 1230 – 1520 at venue CD301",
          "Instructor: Dr. LUI Richard (email: cswclui@polyu.edu.hk)",
          "Teaching assistants to be confirmed (TBC)",
          "Assessment includes: Coursework (70%), Assignment (12%), Quiz (25%), Project (27%), Class Participation (6%), Final Exam (30%)",
          "Students must bring laptops for hands-on labs/class activities during lectures.",
          "Teaching plan includes: Course Overview, Agile Development, Cloud-Based Applications, Software Testing, Project Discussions, and Presentations.",
          "Must register a GitHub account with PolyU Email at https://github.com",
          "Sign up for GitHub Student Developer Pack at https://education.github.com/pack",
          "Applications for GitHub Student Developer Pack may take 1-7 days for approval.",
          "Complete GitHub registration by the end of week 1 for lab use in week 2."
        ],
        "summary": "COMP3122 covers software development with a focus on collaboration tools, agile methodologies, and cloud applications. Students are required to engage in various assessments, including coursework and projects, while utilizing GitHub for lab activities. Important deadlines and registration processes are highlighted for effective participation."
      },
      "multipleChoice": [
        {
          "question": "What is the percentage weight of coursework in the overall assessment for COMP3122?",
          "options": [
            "30%",
            "70%",
            "25%",
            "12%"
          ],
          "correctAnswer": 1
        },
        {
          "question": "Which instructor teaches COMP3122?",
          "options": [
            "Dr. Smith",
            "Dr. Lui Richard",
            "Prof. Johnson",
            "Ms. Lee"
          ],
          "correctAnswer": 1
        },
        {
          "question": "When is the final exam scheduled in the COMP3122 course?",
          "options": [
            "Week 10",
            "Week 12",
            "Week 13",
            "Week 8"
          ],
          "correctAnswer": 2
        },
        {
          "question": "What is one of the topics covered in the COMP3122 course?",
          "options": [
            "Machine Learning",
            "Software Testing (I)",
            "Cryptography",
            "Web Design"
          ],
          "correctAnswer": 1
        },
        {
          "question": "What should students bring to class for hands-on labs and activities?",
          "options": [
            "Textbooks",
            "Laptops",
            "Notebooks",
            "Smartphones"
          ],
          "correctAnswer": 1
        }
      ],
      "createdAt": "2025-04-02T14:07:09.733Z",
      "isMockData": false
    },
    {
      "id": "1743603499436",
      "fileName": "1-Overview of modern software development.pdf",
      "originalText": "\n\nOverview of  Modern Software \nDevelopment\n1\n\nGithubOctoverse2024 Report\n•In 2024, Python overtook JavaScript as the most popular language on GitHub\n2\nhttps://github.blog/news-insights/octoverse/octoverse-2024\n\n•In the past year, more developers joined GitHub and engaged with open source \nand public projects (in some cases,empowered by AI)\n•Tools like GitHub Copilot started going mainstream in early 2023, the number \nof  developers on GitHub has rapidly grown\n•In 2024, developers on GitHub created over 70,000 new public and open source \ngenerative AI projects and made almost 60% more total contributions to all \ngenerative AI projects on GitHub.\n3\n\nAI in software development \n2024 survey\n4\nhttps://github.blog/news-insights/research/survey-ai-wave-grows\n\nStack Overflow\n•The number of  questions and votes decreased by about \n50% after the release of  ChatGPT\n•AI can solve many programming problems.\n•Generative AI may have been trained using content from Stack \nOverflow.\n•François Chollet describes this as the \"Planet of  the Apes \nsyndrome.\"\n•AI can repeat existing knowledge, but it cannot create new \nanswers.\n•If  Stack Overflow continues to decline, AI may not have new \nquestions and answers to learn from.\n5\n\nThe AI Revolution in Software Development\n•Generating code (the new stack overflow)\n•Summarizing code\n•Adding comments\n•Generation of  Test cases \n•Re-factoring code\n•Improve existing code without altering its external \nbehavior\n•E.g. enhance readability, maintainability, performance, and adherence \nto coding standards. \n•Pair programming\n•A human developer works alongside an artificial \nintelligence (AI) tool, treating the AI as a coding partner.\n6\nVideo: Security in the (AI assisted) software development lifecycle\n\nAIAssisted Coding\n•Generative AI is being used by many Fortune 100 companies to write computer code.\n•Johnson & Johnson, United Airlines, and Goldman Sachs, etc\n•AI coding tools like GitHub Copilot suggest portions of  code, helping developers work faster.\n•Chief  Information Officers (CIOs) are concerned about the exponential increase in the amount of  \nsoftware that can be created with these tools.\n•Manage, update, and organize the AI generated code\n•The skill set for developers is changing. \n•In the past: programmers create from nothing\n•Programmers are now expected to do more checking over work.\n•Low Code and No Code Tools\n•Democratizing software development\nCould AI-Generated Code Be Too Much of a Good Thing? | WSJ Tech News Briefing\nhttps://www.youtube.com/watch?v=-UhjYsLBuUw\n\nThe AI Revolution in Software Development\n•Generating code (the new stack overflow)\n•Summarizing code\n•Adding comments\n•Generation of  Test cases \n•Re-factoring code\n•Pair programming\n8\nVideo: Security in the (AI assisted) software development lifecycle\n\nImpact of  AI on programmers\n9\nhttps://www.youtube.com/watch?v=2mH0ZLU3Z_s\nhttps://www.youtube.com/watch?v=yj73GIEKmLI\nhttps://www.youtube.com/watch?v=U-AToWsTlrM\n\nGenerative AI in Amazon\n•According to Amazon’s CEO Andy Jassy, with the use of  generative \nAI\n•The average time to upgrade an application to Java 17 drops from an \naverage of  50 developer-days to just a few hours, saving the equivalent \nof  4,500 developer-years of  work \n•Upgrade more than 50% of  their production Java systems to modern \nversions in six months\n•Their developers shipped 79% of  the auto-generated code reviews \nwithout any additional changes.\n•The upgrades have enhanced security and reduced infrastructure \ncosts, providing an estimated $260M in annualized efficiency gains.\n10\nhttps://www.linkedin.com/in/andy-jassy-8b1615/recent-activity/all\n\n•Matt Garman, CEO of  Amazon Web Services (AWS)  warn that AI could replace \ntheir coding work.\n•\"Coding is just kind of  like the language that we talk to computers. It's not necessarily the skill in and of  \nitself,\" he explained. \n•\"The skill in and of  itself  is like, how do I innovate? How do I go build something that's interesting for my \nend users to use?”\n11\nhttps://www.hrgrapevine.com/us/content/article/2024-08-22-amazon-cloud-ceo-warns-software-engineers-ai-\ncould-replace-your-coding-work-within-2-years\n\nChallenges with AI-Generated Code\n•Hallucination: Co-pilot and Chat GPT can generate code that is incorrect or irrelevant\n•Security vulnerabilities: The AI model are trained on massive datasets of  open-source \ncode, which can contain numerous security vulnerabilities.\n12\n\nGPT and GitHub Copilot\n•GitHub Copilot is an AI-powered coding assistant that \nhelps developers write code faster and more efficiently\n13\nhttps://github.com/features/copilot\nhttps://www.pcmag.com/news/chatgpt-passes-google-\ncoding-interview-for-level-3-engineer-with-183k-salary\nhttps://openai.com/index/learning-to-reason-with-llms\n\nAmazon Whisper and Amazon Q\n•Amazon Codewhisper: AI-powered productivity tool for the IDE and command line\n•Amazon Q: Generative AI–powered assistant in AWS\n14\nhttps://aws.amazon.com/codewhisperer\nhttps://aws.amazon.com/q\n\nCursor AI Code Editor\n15\nhttps://www.cursor.com\n\nCase Study: McDonald's Home Delivery\n•37,000 restaurants in 120 countries\n•Increasingly takes orders from more popular online services like UberEats.\n16\n\nhttps://www.news.com.au/lifestyle/food/restaurants-bars/mcdonalds-australia-launches-table-delivery-service-and-partners-with-\nubereats/news-story/1633509d4e16d719ffedeb3d85a88254\n17\n\nCritical business requirements\n•McDonald’s went from idea to execution on a “massive scale” within four months.\n•Two-week development iterations \n•McDonald’s takes between 250,000 and 500,000 orders an hour, or as many as 20,000 orders a \nsecond\n•Peak hour happens three times a day every day \n•During breakfast, lunch and dinner time\n•Used by its worldwide operations to accept orders from food delivery services.\n•The architecture behind the platform had to be scalable, reliable and secure.\n•Whatever the team built needed to work across multiple countries, supporting different business \nrequirements, business rules and then different delivery partners.\n•Work with multiple delivery partners in the world\n•UberEatsin US\n•Other partners in European and Asian countries\n18\n\nMcDonald’s Delivery System: The Tech Stack\n•Third-Party Delivery Platforms: Integration with platforms like Uber Eats for handling customer orders.\n•Microservices Architecture:\n•AWS Elastic Container Service (ECS): Serves as the core of  the solution\n•Using multiple microservices within AWS ECS for different functionalities, each with different scale and runtime profiles.\n•Backend\n•RESTful APIs: Utilized via an API gateway pattern for middleware communication.\n•Data Handling and Storage\n•Amazon Simple Queue Service (SQS): For asynchronous inter-service communication.\n•Amazon ElastiCachewith Redis: For distributed caching to handle high transaction volumes.\n•Amazon Relational Database Service (RDS): Backs up Redis and is used alongside Amazon S3 for \nunstructured data management.\n•Development and Operations\n•Adopting AWS Services: Decision to use AWS platform services for scalability and ease of  management.\n•DevOps and CI/CD: Utilizing Jenkins for pipeline orchestration and Terraform for deployment, with integration tests and \nvalidation scripts.\n•Polyglot Tech Stack\n•Supports multiple programming languages, facilitating legacy code integration and new developments.\n•Different programming models (synchronous/asynchronous) based on the type of  microservices.\n•Monitoring and Logging\n•New Relic for telemetry data \n•ELK stack for application logging, ensuring comprehensive oversight of  system performance.\n19\n\nScalability\n•Scalability refers to the ability to adjust the capacity of  the system to cost-efficiently \nfulfill the demands. \n•Handle more users, clients, data, transactions, or requests without affecting the user \nexperience. \n•Scale down as much as scale up easily and quickly\n20\n\nDesigning for Scale\n21\n•Vertical vs. Horizontal scaling\n•Adding more clones of  your application \n•Separating application and database \n•Scaling the Data\n•Data replication\n•Copying data and store in multiple locations to ensure consistency and availability.\n•Data partitioning \n•Keeping a subset of  the data on each machine\n•Functional partitioning \n•Dividing the system into smaller subsystems based on functionality\n\nVertical Vs. Horizontal Scaling\n22\n\nVertical Scaling (Scaling up)\n•Increasing the capacity of  a resource \n•e.g. additional hardware, using a larger VM size\n•Without making any changes to the application\n23\nhttps://adrianmejia.com/how-to-scale-a-nodejs-app-based-on-number-of-users/\n\nVertical scaling has a limit\n•Scaling out may be cheaper than scaling up\n•Running several small VMs can cost less than a \nsingle large VM.\n24\n\nHorizontal scaling (scalingout) \n•Adding new instances of  a resource, such as VMs or database replicas.\n•Horizontal scale must be designed into the system\n25\n\nSeparating application and database\n•Application and database doesn’t fight for the same resources.\n•We can scale each tier (app, db) independently to as many as we need.\n26\nhttps://adrianmejia.com/how-to-scale-a-nodejs-app-based-on-number-of-users\n\nCase Study: Scaling in Instagram\nRef: Scaling Instagram Infrastructure\nhttps://www.youtube.com/watch?v=hnpzNAPiC0E\n27\n\nMonolithic Architecture\n28\n•A single-tiered software application in which different components \ncombined into a single program \nMonolithic e-Commerce Application\n\nChallenges\n•Deployment of  updates to the application require a restart of  the application, which \nmay temporarily impact availability\n•Can't scale application components individually\n•High coupling across its functional components. \n•New features/fixes become tricky, time-consuming, and expensive to implement.\n•A monolithic application is constructed with a single technology stack.\n29\n\nMicroservice architecture\n30\n•Video: What are Microservices?\n•An application is broken into smaller, completely independent components\n•Independently deployable\n•Servicescan be developed and deployed in parallel, often by multiple teams.\nMicrosoft’s eShopOnContainersreference app\nhttps://docs.microsoft.com/en-us/dotnet/architecture/cloud-native/introduce-eshoponcontainers-reference-app\n\nDevelopment transformation at Amazon\n•Amazon was one of  the first companies to use microservices to \nrevolutionize their whole company.\n20012009\nMonolithic \napplication + teams\nMicroservices\n+ two-pizza teams\n\nMonolith development cycle challenges\nDevelopers\nDeployTestBuild\nDelivery pipeline\nApp\n\nMicroservice-based development lifecycle\nDelivery pipelinesServices\nDeployTestBuild\nDeployTestBuild\nDeployTestBuild\nDeployTestBuild\nDeployTestBuild\nDeployTestBuild\nDevelopers\n\nMicroservicesin Netflix\n34\n•Netflix decided to split its monolith into microservices in 2009, after \nexperiencing growing pains and frequent server disruptions as a result of  their \nmonolithic design.\n•> 700 Microservices in Netflix nowadays\nRef: Mastering Chaos -A Netflix Guide to MicroservicesRef:AWSre:Invent2015: A Day in the Life of a Netflix Engineer\n\nCase Study: Uber’s microservice architecture\n•The world-famous taxi-hailing software started off  with a monolithic architecture \ndesigned to serve the sole city where it was developed, San Francisco.\n•When Uber expanded into more cities, they started to introduce new products and \nservices. \n•The application started to grow rapidly, and that’s when maintaining the monolithic \nsystem became a real challenge.\n35\n\n36\n•Uber decided to break up the monolith into multiple codebases to form a microservice \narchitecture\n•The units are individual separate deployable units performing separate functionalities. \n•All the features can now be scaled individually\n•E.g. the number of  people searching for cabs is comparatively more than the people actually booking a cab \nand making payments\n•Independently deployable \n•If  you want to change anything in the billing microservices, then you just have to deploy only billing \nmicroservices and don’t have to deploy the others.\n\nScaling in monolithic application vs. \nmicroservices\n37\nMonolithic Architecture\nMicroservicesArchitecture\n\nThe three dimensions of  scaling microservices\n38\nDeploying multiple, identical instances \nof the application.\nDecompose a system to address the unique \nscaling needs of different functionality.\nSharding: Horizontal data partitions\n\nFunctional Decomposition\n•Withfunctional decomposition, you extract functionality and allow it to be \nscaled independently.\n•Which module should be decomposed first?\n39\nhttps://martinfowler.com/articles/break-monolith-into-microservices.html\nMonolith first approach\n\nHorizontal Duplication\n•Load balancer\n•Distribute the load across multiple copies of  your functionality,\n•Detect when a node is unavailable and remove it from the load balancer pool.\n40\nRead/Write\n\nData Partitioning\n•Divide the data in some way so that each server would get only a subset of  it\n•Shading key\n•Decide which server is responsible for the data that you are looking for.\n•Scale both read and write\n41\nPartitioning at the database level\nPartition at the microservice instance level\n\nSoftware Bugs, Failure and Outage\n•When the system does not meet its desired service level objectives. \n42\nCause of Software DisruptionDescription\nDeployment FailureIssues during the deployment process leading to incomplete or failed updates.\nHardware FailuresMalfunction of physical components such as servers, storage, or networking gear.\nSoftware BugsErrors or vulnerabilities in the application code that lead to crashes or failures.\nNetwork IssuesProblems with network connectivity, such as outages or congestion.\nHuman ErrorMistakes made by operators or developers during deployment or maintenance.\nPower OutagesLoss of electrical power affecting data centers or critical infrastructure.\nNatural DisastersEvents like earthquakes, floods, or hurricanes that affect physical locations.\nCyber AttacksMalicious activities such as DDoS attacks, hacking, or ransomware.\nCapacity IssuesOverloading of resources due to unexpected spikes in traffic or usage.\nThird-Party Service FailuresDisruptions in services provided by external vendors or partners.\nConfiguration ChangesChanges made to system settings or configurations that inadvertently cause issues.\n\nExample: Blackboard outage\n43\n\n44\n\nExample: Alibaba Cloud Outage\n45\nhttps://www.scmp.com/tech/big-tech/article/3203983/alibaba-clouds-recent-outage-hong-\nkong-raises-alarm-infrastructure-risks-more-firms-shift-tech\n\nExample: New Year Lucky Draw\n46\nhttps://www.scmp.com/news/hong-kong/politics/article/3044134/new-year-lucky-draw-featuring-hk4-million-prizes-crashes\n\nSystem Failure and Outage\n•When the system does not meet its desired service level objectives. \n47\nCommon causes of service disruption\n\nTime to detect\n•Refers to the duration it takes to identify a problem or issue in software.\n•Measures the time from when a failure occurs to when it is noticed or detected \nby users or monitoring systems.\n•Involves monitoring software performance, logs, error reports, or user feedback \nto identify issues.\n•A shorter time to detect indicates effective monitoring and alerting systems.\n48\n\nTime to mitigate\n•Represents the duration between the detection of an incident and the implementation of \nmitigating actions to resolve or minimize the impact.\n•Involves identifying the root cause, analyzing the issue, and developing a plan to address it.\n•Can include activities like deploying code fixes, restarting services, or reallocating resources.\n•A shorter time to mitigate is crucial for minimizing downtime, reducing customer impact, and \nrestoring system functionality.\n49\n\nTime between failure\n•Refers to the interval between two consecutive failures or incidents in a system or service.\n•Measures how often failures or incidents occur.\n•A longer time between failures indicates a more reliable system and better performance.\n•Increase the time between failures through proactive measures like monitoring, capacity \nplanning, and fault-tolerant design.\n50\n\nAvailability\n•The proportion of  time that the system is functional and working.\n•Measured as a percentage of  uptime.\n•Availability is often described in terms of  \"9s\" \n•E.g., \"four 9s\" means 99.99% uptime.\n% UptimeDowntime per weekDowntime per monthDowntime per year\n99%1.68 hours7.2 hours3.65 days\n99.9%10 minutes43.2 minutes8.76 hours\n99.95%5 minutes21.6 minutes4.38 hours\n99.99%1 minute4.32 minutes52.56 minutes\n99.999%6 seconds26 seconds5.26 minutes\nAvailability=\n푈푝푡푖푚푒\n(푈푝푡푖푚푒+퐷표푤푛푡푖푚푒)\n51\n\n•푀푇퐵퐹=푀푇푇퐹+푀푇푇푅\n•Mean time between failure (MTBF)\n•Mean time to failure (MTTF) \n•Mean time to repair (MTTR)\n퐀퐯퐚퐢퐥퐚퐛퐢퐥퐢퐭퐲=\n퐌퐓퐓퐅\n퐌퐓퐓퐅+퐌퐓퐓퐑\nApplication \nFailure\nTime to Repair\nTime between failure\nTime to Failure\nApplication resumes\nnormal operation\nApplication \nFailure\n52\n\nSystems with hard dependency\n•An interruption in a dependent system directly translates to an interruption of  the \ninvoking system\n•The invoking system availability is the product of the dependent systems’ availabilities\n53\n\nRedundant components\n•A system may involve the use of  independent, redundant components \n•E.g. Deploy cloud-based applications across different Availability Zones (AZ)\n54\nLoad balancer performs \nhealth checks to monitor \nhealth of registered targets.\nListenerListener\nTargetTargetTargetTargetTarget\nAvailability Zone AAvailability Zone B\nAWS Cloud\nLoad balancer routes\ntraffic only to \nhealthy targets.\nX\n✓.✓.✓.✓.\nLoad balancer accepts \nincoming traffic \nfrom clients.\nListener checks for \nconnection requests.\n•Availability zones are data centers with redundant power, \nnetworking connectivity\n•Each AZ is isolated from failures in otherAvailability Zone\n\nExample\n•Suppose a system makes use of  two independent components, each with an availability \nof  99.9%\n퐴푣푎푖푙푎푏푖푙푖푡푦\n=M푎푥푎푣푎푖푙푎푏푖푙푖푡푦–(푑표푤푛푡푖푚푒표푓푑푒푝푒푛푑푒푛푡1)∗(푑표푤푛푡푖푚푒표푓푑푒푝푒푛푑푒푛푡2)\n=100%−(0.1%∗0.1%)=99.99%\n55\n\nCommon application availability design goals\nRef: Reliability Pillar AWS Well-Architected Framework\n56\n\nExample implementation of  availability goal\n99.9%: Customer-facing systems that are not high \nrevenue for the business and can tolerate a longer \nrecovery time or recovery point  \n57\nRef: Reliability Pillar AWS Well-Architected Framework \n99.99% : Mission critical applications that are main or significant revenue \ndrivers for a corporation (e.g. an e-commerce site, a business to business \nweb service, or a high traffic content/media site.)\n\nWaterfall Software development lifecycle\n•The whole process of  software development is divided into separate phases. \n•The outcome of  one phase acts as the input for the next phase sequentially.\n58\nRequirement \nspecification\nCustomer \n\nReality of  Software Development\n•No way to know if  the requirements and design \nare right until the team starts building code\n•Requirements always change \n•changing customer desires and user needs\n•initial requirements analysis inadequate\n•understandings and insights gained through \nexperience\n•changing technology and competitive situation\n•The design is never right the first time\n59\n\nWhat is Agile Development\n•Agile software development comprises various approaches to software \ndevelopment \n•Requirements and solutions evolve through the collaborative effort of  self-\norganizing and cross-functional teams and their customer(s)/end user(s)\n60\n\nAgile Methodology\n•Scrum\n•Kanban\n61\n\nRelease frequently\n•Agile team produces potentially releasable increments of  the most valuable items every 30 days \nor less\n•Each release is an opportunity to create value when your product is put into the hands of  \ncustomers.\n•Validate your idea by getting the software into the marketplace.\n•Validate that what you want to do is technically feasible.\n62\n\nRequirements development effort over time\n63\nVideo: The Wrong way to do Agile: Specifications\n\nCompanies that adopt Agile Development\n•Amazon \n•Facebook\n•Google\n•HP\n•Tesla\n•AirBnB\n•Netflix\n•Flickr\n•Etsy\n•OANA\nRef: https://www.youtube.com/watch?v=CmcE1pvfWHc&t=1626s\n\nGoogle Software Development\n“Google is a company built on innovation and speed, \nreleasing code the moment it is useful (when there are few \nusers to disappoint) and iterating on features with early \nadopters (to maximize feedback).”\n“Google prefers to release often and leans toward \ngetting a product out to users quickly so we can get \nfeedback and iterate. Google tries hard to develop only \nproducts that users will find compelling and to get new \nfeatures out to users as earlyas possible so they might \nbenefit from them. Plus, we avoid over-investing in \nfeatures no user wants because we learn this early. This \nrequires that we involve users and external developers \nearly in the process so we have a good handle on whether \nwhat we are delivering hits the mark.”\nSource: How Google Test Software\n65\nRef: Software Engineering at google scale\n\nCase Study: Software Development Roles at Google\n66\nRoleResponsibilities\nProduct Managers-Deciding what to build at Google.\nSoftware Engineers\n-Solve software problems through coding.\n-Use Google's tools to streamline software development, code review, and deployment.\nSoftware Engineering in Test (SET)\n-Find bugs before users do, ensuring quality for millions\n-Involved in product development, planning, and feature discussions, focusing on a single \narea deeply.\nTest Engineers (TE)\n-Ensure software and system quality, finding ways software can break and preventing these \nissues\n-Work on various aspects like UI testing for VR apps and enabling developers to write \nautomated tests.\n-Develop new testing technology for global adoption.\nRelease Engineers-Automate the release pipeline to ensure quality, security, and repeatability.\nSite Reliability Engineers\n-Keep Google systems up and running 24/7, ensuring constant access\n-Includes a variety of responsibilities like reading/writing designs, coding, and solving technical \nproblems\n-Responsible for the service's functionality, cost-efficiency, reparability, and scalability.\n\nTest Automation\n•Test automation involves the use of  software to control the execution of  tests\n•A unit test case consists of  code which checks if  another part of  code (method) \nworks as expected.\n•JUnit is a unit testing framework for Java programming language.\n67\n\nAutomated Testing at Microsoft\n•“We literally run 60,000 plus unit tests on \nevery single pull request”\n•“We run sixty somewhat thousand unit tests \nin under seven minutes”\n68\nhttps://youtu.be/nno6DwevspI\nDonovan Brown: \"Microsoft’s Agile Transformation Story\"\n\nSoftware Deployment\n•The system is deployed in the customer environment or released into the \nmarket/production.\n•Software Deployment strategies\n•\"Big Bang\" Deployment \n•Rolling Upgrades\n•Blue-Green Deployment\n•Canary Deployment\n•Versioned Deployment\n69\n\n\"Big Bang\" Deployment \n70\n•All users of  a system are moved to the new system at a specific date and time\n•Required the business to conduct extensive development and testing before \nrelease\n•Risky for public-facing or business-critical application \n•downtime without easy rollbacks.\n\nRolling Upgrades\n71\n•An application’s new version gradually replaces the old one. \n•New and old versions will coexist for some time \n•Allow roll back any new component incompatible with the old components.\n\nBlue-Green Deployment\n72\n•Maintain two identical production environments work in parallel.\n•One is the currently-running production environment receiving all user traffic (Blue). \n•The new version of  the application is deployed in the green environment and tested for \nfunctionality and performance\n•Once the testing results are successful, application traffic is routed from blue to \ngreen. Green then becomes the new production.\n•If  there is an issue after green becomes live, traffic can be routed back to blue.\nTesting\n\nCanary Deployment \n73\n•Also maintain two production environment\n•Instead of  switching from blue to green in one step, you deploy a new application code \nin a small part of  the production infrastructure.\n•minimizes any impact/risk\n•With no errors reported, the new version can gradually roll out to the rest of  the \ninfrastructure.\n\nCanary Deployment/Testing\n•Canary release \n•Gradually release new features to a subset of  your users \n•reduce the risk of  introducing a new software version in production \n•A/B test features to assess performance before releasing them to a majority of  your \nusers.\n74\n\nDark Launching\n•A software development technique that turns certain functionality \non and off  during runtime, without deploying new code.\n•Decoupling deploy from release\n•As long as afeature isnot ready to be released, it is disabled.\n75\nif(featureFlags[‘new-cool-feature’]==TRUE){ \nrenderNewCoolFeature(); \n}\n\nUse of  feature flags\n•Roll out features only to certain user segments\n•A/B tests\n•Enable a feature for half  of  a segment of  users, and disable the feature for the other half\n•Observe how the two perform against each other for a certain metric (eg.app usage or purchases)\n76\n\nVersioned Deployment\n77\n•Keep all versions alive, while letting the user choose which version to use\n•Popular amongst API developers\n•Extra capacity to host legacy versions, and maintaining shared data sources across \nversions.",
      "flashcards": [
        {
          "question": "What programming language overtook JavaScript as the most popular on GitHub in 2024?",
          "answer": "Python overtook JavaScript as the most popular language on GitHub in 2024."
        },
        {
          "question": "How many new public and open source generative AI projects were created on GitHub in 2024?",
          "answer": "Over 70,000 new public and open source generative AI projects were created on GitHub in 2024."
        },
        {
          "question": "What is the 'Planet of the Apes syndrome' in the context of AI in software development?",
          "answer": "François Chollet describes it as AI being able to repeat existing knowledge but not create new answers, potentially leading to a decline in new questions and answers."
        },
        {
          "question": "What are some key tasks that generative AI can perform in software development?",
          "answer": "Generative AI can generate code, summarize code, add comments, generate test cases, and refactor code."
        },
        {
          "question": "What concern do Chief Information Officers (CIOs) have regarding AI-generated code?",
          "answer": "CIOs are concerned about the exponential increase in the amount of software that can be created with AI tools, and the need to manage, update, and organize this AI-generated code."
        },
        {
          "question": "What major efficiency gain did Amazon experience by using generative AI for application upgrades?",
          "answer": "Amazon reduced the average time to upgrade applications to Java 17 from 50 developer-days to just a few hours, saving the equivalent of 4,500 developer-years."
        },
        {
          "question": "What challenge is associated with AI-generated code, particularly regarding its accuracy?",
          "answer": "AI-generated code can suffer from hallucination, meaning it can generate incorrect or irrelevant code."
        },
        {
          "question": "What is GitHub Copilot?",
          "answer": "GitHub Copilot is an AI-powered coding assistant that helps developers write code faster and more efficiently."
        },
        {
          "question": "What significant operational requirement did McDonald's meet when developing their home delivery service?",
          "answer": "McDonald's had to handle between 250,000 and 500,000 orders an hour, or as many as 20,000 orders a second, requiring a scalable, reliable, and secure architecture."
        }
      ],
      "summary": "The \"Github Octoverse 2024 Report\" highlights significant trends in modern software development, particularly the rise of Python as the most popular programming language on GitHub, surpassing JavaScript. The report indicates a surge in developer engagement with open source projects, partly fueled by AI tools like GitHub Copilot, which gained mainstream acceptance in early 2023. In 2024, over 70,000 new generative AI projects were created on GitHub, with contributions to such projects increasing by nearly 60%.\n\nA survey from Stack Overflow noted a 50% decline in questions and votes following the introduction of ChatGPT, as generative AI tools increasingly resolve programming challenges. However, concerns arise regarding AI's limitations; while it can replicate existing knowledge, it struggles to generate new solutions. The concept of \"pair programming\" is evolving, with human developers now working alongside AI tools to enhance code quality and efficiency.\n\nFortune 100 companies, including Johnson & Johnson and Goldman Sachs, are leveraging generative AI for coding, facilitating faster development cycles and code management. Nevertheless, Chief Information Officers express apprehension about the rapid increase in AI-generated software and the potential need for new skill sets among developers, who are now expected to validate AI outputs rather than create original code.\n\nAmazon's application of generative AI illustrates its efficiency gains, reducing application upgrade time dramatically and achieving significant cost savings. However, challenges such as code \"hallucinations\" and security vulnerabilities persist with AI-generated code.\n\nThe case study of McDonald’s home delivery system showcases the need for scalable, reliable tech architectures that integrate with various third-party delivery services. Using a microservices approach on AWS, the system can handle high transaction volumes while accommodating diverse business requirements globally. Scalability remains a core focus, ensuring the platform can efficiently adapt to fluctuating demands.",
      "cornellNotes": {
        "cues": [
          "Overview of Modern Software Development",
          "GitHub Octoverse 2024 Report",
          "AI in Software Development",
          "AI Revolution in Software Development",
          "Impact of AI on Programmers",
          "Challenges with AI-Generated Code",
          "Case Study: McDonald's Home Delivery"
        ],
        "notes": [
          "In 2024, Python surpassed JavaScript as the most popular language on GitHub.",
          "More developers joined GitHub, engaging with open source projects, partly due to AI.",
          "GitHub Copilot became mainstream in early 2023, leading to rapid growth in developers.",
          "Developers created over 70,000 new generative AI projects on GitHub in 2024.",
          "Stack Overflow saw a 50% decrease in questions and votes after ChatGPT was released.",
          "Generative AI can solve programming problems but may lack the ability to create new answers.",
          "AI can summarize, comment, and refactor code, and assist in test case generation.",
          "AI-assisted coding is used by Fortune 100 companies like Johnson & Johnson and Goldman Sachs.",
          "Generative AI can significantly reduce application upgrade time (e.g., from 50 developer-days to hours).",
          "AI could potentially replace some coding jobs, shifting the focus to innovation and user-centered design.",
          "Challenges with AI-generated code include hallucination and security vulnerabilities.",
          "McDonald's developed a scalable platform for online orders within four months, processing up to 500,000 orders an hour."
        ],
        "summary": "The landscape of software development is rapidly changing due to the rise of AI technologies, particularly with tools like GitHub Copilot, which enhance productivity and efficiency. While Python has overtaken JavaScript in popularity, the role of traditional coding skills is evolving as AI tools take on more responsibilities. Companies like Amazon are leveraging generative AI to streamline processes, but challenges such as security vulnerabilities and the potential for job displacement remain. A case study on McDonald's illustrates the swift adaptation to modern demands in software development."
      },
      "multipleChoice": [
        {
          "question": "What programming language overtook JavaScript as the most popular on GitHub in 2024?",
          "options": [
            "Java",
            "C++",
            "Python",
            "Ruby"
          ],
          "correctAnswer": 2
        },
        {
          "question": "What significant change occurred on Stack Overflow after the release of ChatGPT?",
          "options": [
            "Increase in questions",
            "Decrease in questions and votes",
            "More AI-generated answers",
            "No change at all"
          ],
          "correctAnswer": 1
        },
        {
          "question": "Which of the following tasks can generative AI perform in software development?",
          "options": [
            "Creating new programming languages",
            "Generating code",
            "Designing software architecture",
            "Managing server infrastructure"
          ],
          "correctAnswer": 1
        },
        {
          "question": "What did Amazon's use of generative AI achieve regarding application upgrades?",
          "options": [
            "Increased the average time to upgrade",
            "Decreased the average time to upgrade significantly",
            "No effect on upgrade time",
            "Required more developer-days for upgrades"
          ],
          "correctAnswer": 1
        },
        {
          "question": "What concern did Chief Information Officers (CIOs) express regarding AI coding tools?",
          "options": [
            "They are too expensive",
            "They reduce the need for programmers altogether",
            "They make managing AI-generated code difficult",
            "They do not enhance productivity"
          ],
          "correctAnswer": 2
        }
      ],
      "createdAt": "2025-04-02T14:18:19.436Z",
      "isMockData": false
    },
    {
      "id": "1743649026864",
      "fileName": "2. Developing GenAI Powered apps.pdf",
      "originalText": "\n\nLab: GenAIpowered apps\n1\n\nPreparation\n2\nAccept the following invite link for GitHub Classroom to create the starter repository in the \ncourse's GithubOrganization. \nhttps://classroom.github.com/a/ggldp4lJ\nPlease select your student ID to bind it to your GitHub account\n\nGitHub Models\n•You can use GitHub Models to find and experiment with AI models for free.\n1.Go togithub.com/marketplace/models.\n2.ClickModel: Select a Modelat the top left of the page.\n3\n\n4\n•Visit https://github.com/marketplace/models/azure-openai/gpt-4o-mini\n\n•Follow the steps to get an API Key\n5\n\n6\nClick “Generate Token”.\nCopy the token and store securely.\nFollow the remaining steps to configure the environment and run the sample program with the API key\n\n•Signup and obtain an API key at https://openrouter.ai.\n7\nStore your API key securely.\nOpenRouterAPIs\n\n•We will use the GPT-4o-mini API in openrouter.ai.\n8\nhttps://openrouter.ai/models/openai/gpt-4o-mini-2024-07-18\n\n•Checking the credit used and view usage history in the openrouterwebsite.\n•You have a usage allowance of  $US 1 before you need to pay\n9\n\nTask 1\n•Clone the starter repository from Blackboard and open Codespaces \nenvironment\n•Create a file “credentials” and include your API keys in the \ncredentials file (no need to include the square bracket)\n10\n[OPENROUTER]\nOPENROUTER_API_KEY = \"[OpenRouterAPI Key]\"\n[GITHUB]\nGITHUB_API_KEY = \"[GITHUB API Key]\"\n\n•To prevent the python libraries and API keys from stored in git commits and \npushed to GitHub, add the file “credentials”, which contains the API key, to \n.gitignorefile \n11\n.gitignore\ncredentials\nmyvenv/\n\n12\npython -m venvmyvenv\nsource myvenv/bin/activate\npip install -r requirements.txt\npython llm.py\nExecute\n\n•In this task, we will create a simple Streamlitapp such that it will generate a \nresponse based on user’s question using the GPT 4o-mini API.\n13\nTask 2\n\n•Define app1.py\n14\nExecute the streamlitapp:\nstreamlitrun app1.py\nAdd streamlitto requirements.txt.\nInstall the dependencies in your virtual environment.\nimport streamlitas st\nimport llm\n# Create a text input box\ntext_input= st.text_input(\"Input your question\")\n# Create a submit button\nif st.button(\"Submit\"):\nuser_prompt= text_input\nsystem_prompt= \"Answer questions in funny tone with Emoji\"\nresult = llm.answer(system_prompt, user_prompt)\nst.markdown(\"## Response\")\nst.write(\"Response:\", result)\n\n•Stage and commit the change to the “task2” branch\n15\nIn the terminal, execute:\ngit checkout -b task2\ngit add .\ngit commit -m \"Completed task 2\"\n\n•Under the source control button. Click “Publish Branch” to update the remote \nGit repository.\n16\n\nTask 3\n17\nIn this task, we will create a streamlitapp to generate questions using LLM API given a topic specified by the user.\n\n•Define the following files.\n18\nprompt.txt\nGenerate {num_questions} questions related to {topic} with answer.\nOutput in JSON format without ```json.\nExample:\n{\n\"questions\": [\n{\n\"question_text\": \"q1\",\n\"answer\": \"q1 answer\"\n},\n{\n\"question_text\": \"q2\"\n\"answer\": \"q2 answer\"\n}\n]\n}\n\n19\nimport streamlitas st, llm, json\n# request LLM to generate questions in JSON format\ndef generate_questions(topic, num_questions):\nsystem_prompt= f\"Youare proficient quiz generator.\"\nwith open(\"prompt.txt\", \"r\") as f: # read user_promptfrom prompt.txt\nuser_prompt= f.read()\n## replace the placeholders with the actual values\nuser_prompt= user_prompt.replace(\"{topic}\", topic)\nuser_prompt= user_prompt.replace(\"{num_questions}\", str(num_questions))\n# Invoke LLM to generate the output based on user and system prompts (TODO)\nreturn results\n# handle the button click event\ndef generate_question_handler():\n# get the topic and num_questionsfrom st.session_state\ntopic = st.session_state[\"topic\"]\nnum_questions= st.session_state[\"num_questions\"]\n# generate questions (TODO)\n# show questions generated (TODO)\nwith st.sidebar:    # the input widigetsare placed in the sidebar\n# TODO\napp2.py\nComplete the missing code in \napp2.py on the left.\nExecute:\nstreamlitrun app2.py\n\n•Stage and commit the change to the “task3” branch.\n20\nIn the terminal, execute:\ngit checkout -b task3\ngit add .\ngit commit -m \"Completed task 3\"\n\n•Under the source control button. Click “Publish Branch” to update \nthe remote Git repository.\n21\n\nDeploy your app to StreamlitCloud\n22\nhttps://streamlit.io/cloud\nSign-in with your Githubaccount.\n\n•Click “Create app”.\n23\n\n24\nReplace with your own GitHub ID.\nPut your OpenRouterand GitHub \nAPI key  in the “Secrets”.\nClick Save.",
      "flashcards": [
        {
          "question": "What is the first step to start the lab on GenAI powered apps?",
          "answer": "Accept the invite link for GitHub Classroom to create the starter repository in the course's GitHub Organization."
        },
        {
          "question": "Where can you find and experiment with AI models for free?",
          "answer": "You can find AI models for free at github.com/marketplace/models."
        },
        {
          "question": "What is the purpose of the credentials file in the project?",
          "answer": "The credentials file is used to securely store your API keys to prevent them from being included in Git commits."
        },
        {
          "question": "What command is used to start a virtual environment in Python?",
          "answer": "The command is `python -m venv myvenv`."
        },
        {
          "question": "What is the main function of the app1.py file in Task 2?",
          "answer": "In app1.py, a Streamlit app is created to generate a response based on the user's question using the GPT-4o-mini API."
        },
        {
          "question": "How do you execute the Streamlit app defined in app1.py?",
          "answer": "You can execute the Streamlit app using the command `streamlit run app1.py`."
        },
        {
          "question": "What does the prompt.txt file contain in Task 3?",
          "answer": "The prompt.txt file instructs to generate a specified number of questions related to a topic in JSON format."
        },
        {
          "question": "What is the final step to deploy your Streamlit app?",
          "answer": "The final step is to sign in with your GitHub account, create the app, and input your OpenRouter and GitHub API key in the 'Secrets' section."
        },
        {
          "question": "What command do you use to create a new branch for Task 2?",
          "answer": "You use the command `git checkout -b task2`."
        },
        {
          "question": "What is the importance of the .gitignore file in this lab?",
          "answer": "The .gitignore file is important to ensure that sensitive information, such as API keys in the credentials file, is not pushed to GitHub."
        }
      ],
      "summary": "The lab focuses on developing AI-powered applications using GitHub and OpenRouter's GPT-4o-mini API. Participants are instructed to set up their environment through GitHub Classroom by creating a starter repository linked to their student ID. They are guided to explore GitHub Models to access AI models for experimentation, specifically the GPT-4o-mini. Participants must sign up for an API key from OpenRouter and securely store it for their projects.\n\nIn Task 1, students clone the starter repository, set up a virtual environment, and create a credentials file to store their API keys. The task involves configuring the environment to run a simple Streamlit application that generates responses based on user queries using the GPT-4o-mini API. Students are instructed to prevent sensitive information from being committed to GitHub by using a .gitignore file.\n\nTask 2 involves creating a new Streamlit app (app1.py) that allows users to input questions and receive responses in a humorous tone, utilizing the llm module. Participants are required to commit their changes to a new branch named \"task2.\"\n\nTask 3 expands the project scope by guiding students to develop a Streamlit app (app2.py) that generates questions based on a user-specified topic. They must read prompts from a prompt.txt file, invoke the LLM API to create questions in JSON format, and display them in the app. After completing this task, students are again instructed to commit their changes to a \"task3\" branch.\n\nFinally, participants deploy their completed applications to StreamlitCloud, where they link their GitHub account and input their OpenRouter and GitHub API keys in the app's settings. This comprehensive lab aims to enhance practical skills in AI application development and deployment.",
      "cornellNotes": {
        "cues": [
          "Preparation for GenAIpowered apps lab",
          "Steps to create GitHub repository",
          "Using GitHub Models",
          "Obtaining and securing API keys",
          "Task 1: Setting up the environment",
          "Creating a Streamlit app",
          "Task 2: Implementing app1.py",
          "Task 3: Creating questions using LLM API",
          "Deploying the app to StreamlitCloud"
        ],
        "notes": [
          "Accept invite link for GitHub Classroom to create starter repository.",
          "Select student ID to bind with GitHub account.",
          "Visit GitHub Models at github.com/marketplace/models to experiment with AI models.",
          "Follow steps to get an API Key from Azure OpenAI.",
          "Securely store the generated token after clicking ‘Generate Token’.",
          "Sign up at openrouter.ai for API key and check usage history.",
          "Clone starter repository from Blackboard and open Codespaces.",
          "Create 'credentials' file for API keys and add to .gitignore.",
          "Install required Python packages and run llm.py to create a Streamlit app.",
          "Define app1.py to handle user input and generate responses using GPT 4o-mini API.",
          "Stage and commit changes to 'task2' branch after implementing app1.py.",
          "Define prompt.txt for generating questions based on user input.",
          "Complete app2.py to handle question generation and display results.",
          "Stage and commit changes to 'task3' branch after implementing app2.py.",
          "Deploy the app to StreamlitCloud by signing in with GitHub account."
        ],
        "summary": "The lab involves preparing for GenAI powered applications by setting up a GitHub repository, obtaining API keys, and creating Streamlit apps. Tasks include configuring the environment, implementing functionalities to generate responses and questions using LLM APIs, and deploying the app to StreamlitCloud."
      },
      "multipleChoice": [
        {
          "question": "What is the first step to create the starter repository in the course's GitHub Organization?",
          "options": [
            "Visit the GitHub Models page",
            "Accept the invite link for GitHub Classroom",
            "Obtain an API Key",
            "Clone the starter repository from Blackboard"
          ],
          "correctAnswer": 1
        },
        {
          "question": "Where should the API keys be stored to prevent them from being pushed to GitHub?",
          "options": [
            ".gitignore file",
            "main.py file",
            "requirements.txt file",
            "streamlitapp.py file"
          ],
          "correctAnswer": 0
        },
        {
          "question": "Which command is used to create a virtual environment in the given instructions?",
          "options": [
            "python -m create-venv myvenv",
            "python -m venv myvenv",
            "create myvenv",
            "pip install myvenv"
          ],
          "correctAnswer": 1
        },
        {
          "question": "What is the purpose of the 'prompt.txt' file in Task 3?",
          "options": [
            "To store API keys",
            "To generate questions related to a specified topic",
            "To log user inputs",
            "To document the project setup"
          ],
          "correctAnswer": 1
        },
        {
          "question": "Which command is used to run the streamlit application defined in 'app1.py'?",
          "options": [
            "python app1.py",
            "streamlit run app1.py",
            "run app1.py",
            "start app1.py"
          ],
          "correctAnswer": 1
        }
      ],
      "createdAt": "2025-04-03T02:57:06.864Z",
      "isMockData": false
    }
  ]
}